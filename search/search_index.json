{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>leaguewizard<ul> <li>constants</li> <li>core</li> <li>exceptions</li> <li>mobalytics</li> <li>models</li> </ul> </li> </ul>"},{"location":"reference/leaguewizard/","title":"leaguewizard","text":"<p>LeagueWizard main entry point.</p>"},{"location":"reference/leaguewizard/#leaguewizard.main","title":"<code>main()</code>","text":"<p>LeagueWizard main entry point function.</p> Source code in <code>src\\leaguewizard\\__init__.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"LeagueWizard main entry point function.\"\"\"\n    import socket\n\n    s = socket.socket()\n    try:\n        s.bind((\"127.0.0.1\", 54321))\n    except OSError as e:\n        raise LeWizardGenericError(\n            message=\"Another instance is already running\",\n            show=True,\n            title=\"Error!\",\n            exit=True,\n        ) from e\n\n    tray = to_tray()\n    tray_thread = threading.Thread(target=tray.run, daemon=True)\n    tray_thread.start()\n\n    asyncio.run(start())\n    tray.stop()\n</code></pre>"},{"location":"reference/leaguewizard/#leaguewizard.to_tray","title":"<code>to_tray()</code>","text":"<p>Create the tray icon with exit action.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Must be a pystray Icon object.</p> Source code in <code>src\\leaguewizard\\__init__.py</code> <pre><code>def to_tray() -&gt; Any:\n    \"\"\"Create the tray icon with exit action.\n\n    Returns:\n        Any: Must be a pystray Icon object.\n    \"\"\"\n    dest = f\"{tempfile.gettempdir()}\\\\logo.png\"\n    urllib.request.urlretrieve(\n        \"https://github.com/amburgao/leaguewizard/blob/main/.github/images/logo.png?raw=true\",\n        dest,\n    )\n    return pystray.Icon(\n        (0, 0),\n        icon=Image.open(dest),\n        menu=pystray.Menu(pystray.MenuItem(\"Exit\", lambda icon, item: os._exit(0))),\n    )\n</code></pre>"},{"location":"reference/leaguewizard/constants/","title":"constants","text":""},{"location":"reference/leaguewizard/core/","title":"core","text":""},{"location":"reference/leaguewizard/exceptions/","title":"exceptions","text":"<p>Exceptions module for LeWizard.</p>"},{"location":"reference/leaguewizard/exceptions/#leaguewizard.exceptions.LeWizardGenericError","title":"<code>LeWizardGenericError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base custom exception error for LeagueWizard.</p> Source code in <code>src\\leaguewizard\\exceptions.py</code> <pre><code>class LeWizardGenericError(Exception):\n    \"\"\"Base custom exception error for LeagueWizard.\"\"\"\n\n    def __init__(\n        self, message: str, show: bool = False, title: str = \"\", exit: bool = False\n    ) -&gt; None:\n        super().__init__(message)\n        if show:\n            from tkinter import messagebox\n\n            messagebox.showerror(title=title, message=message)\n        if exit:\n            sys.exit()\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/","title":"mobalytics","text":"<p>Mobalytics handler module.</p>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.get_mobalytics_info","title":"<code>get_mobalytics_info(champion_name, role, conn, champion_id, summoner_id)</code>  <code>async</code>","text":"<p>TODO.</p> Source code in <code>src\\leaguewizard\\mobalytics.py</code> <pre><code>@alru_cache\nasync def get_mobalytics_info(\n    champion_name: str,\n    role: str,\n    conn: aiohttp.ClientSession,\n    champion_id: int,\n    summoner_id: int,\n) -&gt; Any:\n    \"\"\"TODO.\"\"\"\n    try:\n        page_url = _build_url(champion_name, role)\n        tree = await _get_html(page_url, conn)\n        if tree is None:\n            pass\n        skill_order = tree.css(\".m-m4se9\")\n        skills = []\n        for node in skill_order:\n            skill_attr = node.text()\n            skills.append(skill_attr)\n        skills_string = \" &gt; \".join(skills)\n        nodes = tree.css(Payload_ItemSets.itemsets_css)\n        blocks: list[Block] = []\n        for node in nodes:\n            block_name_node = node.css_first(\"h4\")\n            if len(blocks) == 0:\n                block_name = skills_string\n            else:\n                block_name = block_name_node.text() if block_name_node else \"\"\n            items_node = node.css(\".m-5o4ika\")\n            block_items: list[Item] = []\n            for item_node in items_node:\n                item = item_node.attributes.get(\"src\")\n                matches = re.search(\"(\\\\d+)\\\\.png\", item) if item else None\n                if matches is not None:\n                    block_items.append(Item(1, matches.group(1)))\n            block = Block(block_items, block_name)\n            blocks.append(block)\n        nodes = tree.css(\".m-1eeoc06\")\n        situational_block_items: list[Item] = []\n        for node in nodes:\n            item = node.attributes.get(\"src\")\n            matches = re.search(\"(\\\\d+)\\\\.png\", item) if item else None\n            if matches is not None:\n                situational_block_items.append(Item(1, matches.group(1)))\n        block = Block(situational_block_items, \"Situational Items\")\n        blocks.append(block)\n        itemsets = ItemSet(\n            [champion_id],\n            blocks,\n            f\"{champion_name} ({role})\"\n            if role is not None and role != \"\"\n            else f\"{champion_name} (ARAM)\",\n        )\n        itemsets_payload = Payload_ItemSets(\n            accountId=summoner_id,\n            itemSets=[itemsets],\n            timestamp=0,\n        )\n\n        nodes = tree.css(Payload_Perks.main_perks_css)\n        main_perks = []\n        selected_perks = []\n        for node in nodes:\n            src = node.attributes.get(\"src\")\n            matches = re.search(\"/(\\\\d+)\\\\.svg\", src) if src else None\n            if matches:\n                main_perks.append(int(matches.group(1)))\n        for css in Payload_Perks.selected_perks_css:\n            nodes = tree.css(css)\n            for node in nodes:\n                src = node.attributes.get(\"src\")\n                matches = re.search(\"/(\\\\d+)(\\\\.svg|\\\\.png)\\\\b\", src) if src else None\n                if matches:\n                    selected_perks.append(int(matches.group(1)))\n        perks_payload = Payload_Perks(\n            name=f\"{champion_name} - {role}\"\n            if role is not None and role != \"\"\n            else f\"{champion_name} - ARAM\",\n            current=True,\n            primaryStyleId=int(main_perks[0]),\n            subStyleId=int(main_perks[1]),\n            selectedPerkIds=selected_perks,\n        )\n\n        nodes = tree.css(Payload_Spells.spells_css)\n        spells_ids = []\n        for node in nodes:\n            src = node.attributes.get(\"src\")\n            matches = re.search(\"(\\\\w+)\\\\.png\", src) if src else None\n            if matches:\n                spells_ids.append(SPELLS[matches[1]])\n        spells_payload = Payload_Spells(\n            selectedSkinId=champion_id,\n            spell1Id=int(spells_ids[0]),\n            spell2Id=int(spells_ids[1]),\n        )\n        logger.debug(f\"Added to cache: {champion_name}\")\n        return itemsets_payload, perks_payload, spells_payload\n    except (TypeError, AttributeError, ValueError, LeWizardGenericError) as e:\n        logger.exception(e)\n        pass\n</code></pre>"},{"location":"reference/leaguewizard/models/","title":"models","text":""}]}